{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","studyinbih/tests/app.lint-test.js","studyinbih/tests/helpers/destroy-app.js","studyinbih/tests/helpers/ember-power-select.js","studyinbih/tests/helpers/module-for-acceptance.js","studyinbih/tests/helpers/resolver.js","studyinbih/tests/helpers/start-app.js","studyinbih/tests/integration/components/admin/add-field-modal-test.js","studyinbih/tests/integration/components/admin/admin-navigation-test.js","studyinbih/tests/integration/components/box-link-test.js","studyinbih/tests/integration/components/file-upload-test.js","studyinbih/tests/integration/components/location-view-test.js","studyinbih/tests/integration/components/navigation-wrapper-test.js","studyinbih/tests/integration/components/program-card-test.js","studyinbih/tests/integration/components/star-score-test.js","studyinbih/tests/integration/helpers/millis-to-date-test.js","studyinbih/tests/test-helper.js","studyinbih/tests/tests.lint-test.js","studyinbih/tests/unit/controllers/admin/admission-test.js","studyinbih/tests/unit/controllers/admin/blog-add-test.js","studyinbih/tests/unit/controllers/admin/blog-edit-test.js","studyinbih/tests/unit/controllers/admin/blog-test.js","studyinbih/tests/unit/controllers/admin/city-add-test.js","studyinbih/tests/unit/controllers/admin/city-edit-test.js","studyinbih/tests/unit/controllers/admin/fields-add-test.js","studyinbih/tests/unit/controllers/admin/fields-test.js","studyinbih/tests/unit/controllers/admin/logout-test.js","studyinbih/tests/unit/controllers/admin/program-add-test.js","studyinbih/tests/unit/controllers/admin/program-edit-test.js","studyinbih/tests/unit/controllers/admin/university-add-test.js","studyinbih/tests/unit/controllers/admin/university-edit-test.js","studyinbih/tests/unit/controllers/locations-test.js","studyinbih/tests/unit/controllers/login-test.js","studyinbih/tests/unit/controllers/study-test.js","studyinbih/tests/unit/controllers/university-test.js","studyinbih/tests/unit/routes/admin-test.js","studyinbih/tests/unit/routes/admin/admission-test.js","studyinbih/tests/unit/routes/admin/blog-add-test.js","studyinbih/tests/unit/routes/admin/blog-edit-test.js","studyinbih/tests/unit/routes/admin/blog-test.js","studyinbih/tests/unit/routes/admin/cities-test.js","studyinbih/tests/unit/routes/admin/city-add-test.js","studyinbih/tests/unit/routes/admin/city-edit-test.js","studyinbih/tests/unit/routes/admin/fields-add-test.js","studyinbih/tests/unit/routes/admin/fields-test.js","studyinbih/tests/unit/routes/admin/index-test.js","studyinbih/tests/unit/routes/admin/logout-test.js","studyinbih/tests/unit/routes/admin/program-add-test.js","studyinbih/tests/unit/routes/admin/program-edit-test.js","studyinbih/tests/unit/routes/admin/programs-test.js","studyinbih/tests/unit/routes/admin/universities-test.js","studyinbih/tests/unit/routes/admin/university-add-test.js","studyinbih/tests/unit/routes/admin/university-edit-test.js","studyinbih/tests/unit/routes/admission-test.js","studyinbih/tests/unit/routes/blog-test.js","studyinbih/tests/unit/routes/city-test.js","studyinbih/tests/unit/routes/index-test.js","studyinbih/tests/unit/routes/locations-test.js","studyinbih/tests/unit/routes/login-test.js","studyinbih/tests/unit/routes/program-test.js","studyinbih/tests/unit/routes/search-results-test.js","studyinbih/tests/unit/routes/study-test.js","studyinbih/tests/unit/routes/universities-test.js","studyinbih/tests/unit/routes/university-test.js","studyinbih/tests/unit/services/ajax-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('studyinbih/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/admin/add-field-modal.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/admin/add-field-modal.js should pass ESLint\\n\\n1:16 - \\'Ember\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('components/admin/admin-navigation.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/admin/admin-navigation.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/box-link.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/box-link.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/file-upload.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/file-upload.js should pass ESLint\\n\\n27:5 - Unexpected console statement. (no-console)\\n31:11 - Unexpected console statement. (no-console)\\n32:11 - Unexpected console statement. (no-console)\\n33:11 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/location-view.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/location-view.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/navigation-wrapper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/navigation-wrapper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/program-card.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/program-card.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/star-score.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/star-score.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/admin/admission.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/admin/admission.js should pass ESLint\\n\\n28:48 - \\'timestamp\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('controllers/admin/blog-add.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/admin/blog-add.js should pass ESLint\\n\\n29:48 - \\'timestamp\\' is defined but never used. (no-unused-vars)\\n30:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/admin/blog-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/admin/blog-edit.js should pass ESLint\\n\\n28:48 - \\'timestamp\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('controllers/admin/blog.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/admin/blog.js should pass ESLint\\n\\n2:8 - \\'hbs\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('controllers/admin/city-add.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/admin/city-add.js should pass ESLint\\n\\n40:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/admin/city-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/admin/city-edit.js should pass ESLint\\n\\n55:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/admin/fields-add.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/admin/fields-add.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/admin/fields.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/admin/fields.js should pass ESLint\\n\\n2:8 - \\'hbs\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('controllers/admin/logout.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/admin/logout.js should pass ESLint\\n\\n24:10 - \\'error\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('controllers/admin/program-add.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/admin/program-add.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/admin/program-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/admin/program-edit.js should pass ESLint\\n\\n33:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/admin/university-add.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/admin/university-add.js should pass ESLint\\n\\n35:7 - Unexpected console statement. (no-console)\\n47:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/admin/university-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/admin/university-edit.js should pass ESLint\\n\\n75:7 - Unexpected console statement. (no-console)\\n87:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/locations.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/locations.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/login.js should pass ESLint\\n\\n24:10 - \\'error\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('controllers/study.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/study.js should pass ESLint\\n\\n2:8 - \\'$\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('controllers/university.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/university.js should pass ESLint\\n\\n51:11 - \\'modal\\' is assigned a value but never used. (no-unused-vars)\\n53:7 - Unexpected console statement. (no-console)\\n54:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('helpers/millis-to-date.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/millis-to-date.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin/admission.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/admission.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin/blog-add.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/blog-add.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin/blog-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/blog-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin/blog.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/blog.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin/cities.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/cities.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin/city-add.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/city-add.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin/city-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/city-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin/fields-add.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/fields-add.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin/fields.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/fields.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin/logout.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/logout.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin/program-add.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/admin/program-add.js should pass ESLint\\n\\n13:5 - Unexpected console statement. (no-console)\\n13:5 - Unreachable code. (no-unreachable)');\n  });\n\n  QUnit.test('routes/admin/program-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/admin/program-edit.js should pass ESLint\\n\\n6:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('routes/admin/programs.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/programs.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin/universities.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/universities.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin/university-add.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/university-add.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin/university-edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/university-edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admission.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admission.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/blog.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/blog.js should pass ESLint\\n\\n12:9 - \\'params\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/city.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/city.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/locations.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/locations.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/program.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/program.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/search-results.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/search-results.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/study.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/study.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/universities.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/universities.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/university.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/university.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/ajax.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/ajax.js should pass ESLint\\n\\n');\n  });\n});","define('studyinbih/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('studyinbih/tests/helpers/ember-power-select', ['exports', 'ember-power-select/test-support/helpers'], function (exports, _helpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.selectChoose = exports.touchTrigger = exports.nativeTouch = exports.clickTrigger = exports.typeInSearch = exports.triggerKeydown = exports.nativeMouseUp = exports.nativeMouseDown = exports.findContains = undefined;\n  exports.default = deprecatedRegisterHelpers;\n\n\n  function deprecateHelper(fn, name) {\n    return function () {\n      (true && !(false) && Ember.deprecate('DEPRECATED `import { ' + name + ' } from \\'../../tests/helpers/ember-power-select\\';` is deprecated. Please, replace it with `import { ' + name + ' } from \\'ember-power-select/test-support/helpers\\';`', false, { until: '1.11.0', id: 'ember-power-select-test-support-' + name }));\n\n      return fn.apply(undefined, arguments);\n    };\n  }\n\n  var findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  var nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  var nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  var triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  var typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  var clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  var nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  var touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  var selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, { until: '1.11.0', id: 'ember-power-select-test-support-register-helpers' }));\n\n    return (0, _helpers.default)();\n  }\n\n  exports.findContains = findContains;\n  exports.nativeMouseDown = nativeMouseDown;\n  exports.nativeMouseUp = nativeMouseUp;\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n  exports.nativeTouch = nativeTouch;\n  exports.touchTrigger = touchTrigger;\n  exports.selectChoose = selectChoose;\n});","define('studyinbih/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'studyinbih/tests/helpers/start-app', 'studyinbih/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Ember.RSVP.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n});","define('studyinbih/tests/helpers/resolver', ['exports', 'studyinbih/resolver', 'studyinbih/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('studyinbih/tests/helpers/start-app', ['exports', 'studyinbih/app', 'studyinbih/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('studyinbih/tests/integration/components/admin/add-field-modal-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('admin/add-field-modal', 'Integration | Component | admin/add field modal', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"1uBHbtzE\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"admin/add-field-modal\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"O5JgtEsW\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"admin/add-field-modal\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('studyinbih/tests/integration/components/admin/admin-navigation-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('admin/admin-navigation', 'Integration | Component | admin/admin navigation', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"RMMjjT65\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"admin/admin-navigation\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"dubCqUGv\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"admin/admin-navigation\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('studyinbih/tests/integration/components/box-link-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('box-link', 'Integration | Component | box link', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"YNwhURRL\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"box-link\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"p6d5wVei\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"box-link\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('studyinbih/tests/integration/components/file-upload-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('file-upload', 'Integration | Component | file upload', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"aj90Kxhq\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"file-upload\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"0uPGwFxq\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"file-upload\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('studyinbih/tests/integration/components/location-view-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('location-view', 'Integration | Component | location view', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"WAftvjqF\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"location-view\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"lJ5ECOTR\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"location-view\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('studyinbih/tests/integration/components/navigation-wrapper-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('navigation-wrapper', 'Integration | Component | navigation wrapper', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"v7BhySyA\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"navigation-wrapper\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"5ejaN3M4\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"navigation-wrapper\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('studyinbih/tests/integration/components/program-card-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('program-card', 'Integration | Component | program card', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"NdkEjAd0\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"program-card\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ZyA81cPg\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"program-card\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('studyinbih/tests/integration/components/star-score-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('star-score', 'Integration | Component | star score', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"E6gxtN7N\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"star-score\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ijLU9Vrk\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"star-score\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('studyinbih/tests/integration/helpers/millis-to-date-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('millis-to-date', 'helper:millis-to-date', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"F4u/7SlH\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"millis-to-date\\\",[[20,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('studyinbih/tests/test-helper', ['studyinbih/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('studyinbih/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/admin/add-field-modal-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/admin/add-field-modal-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/admin/admin-navigation-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/admin/admin-navigation-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/box-link-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/box-link-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/file-upload-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/file-upload-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/location-view-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/location-view-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/navigation-wrapper-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/navigation-wrapper-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/program-card-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/program-card-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/star-score-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/star-score-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/millis-to-date-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/millis-to-date-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/admin/admission-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/admin/admission-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/admin/blog-add-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/admin/blog-add-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/admin/blog-edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/admin/blog-edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/admin/blog-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/admin/blog-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/admin/city-add-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/admin/city-add-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/admin/city-edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/admin/city-edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/admin/fields-add-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/admin/fields-add-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/admin/fields-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/admin/fields-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/admin/logout-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/admin/logout-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/admin/program-add-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/admin/program-add-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/admin/program-edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/admin/program-edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/admin/university-add-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/admin/university-add-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/admin/university-edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/admin/university-edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/locations-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/locations-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/study-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/study-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/university-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/university-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/admission-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/admission-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/blog-add-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/blog-add-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/blog-edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/blog-edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/blog-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/blog-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/cities-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/cities-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/city-add-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/city-add-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/city-edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/city-edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/fields-add-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/fields-add-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/fields-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/fields-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/logout-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/logout-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/program-add-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/program-add-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/program-edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/program-edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/programs-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/programs-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/universities-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/universities-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/university-add-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/university-add-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/university-edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/university-edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admission-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admission-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/blog-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/blog-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/city-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/city-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/locations-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/locations-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/program-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/program-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/search-results-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/search-results-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/study-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/study-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/universities-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/universities-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/university-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/university-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/ajax-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/ajax-test.js should pass ESLint\\n\\n');\n  });\n});","define('studyinbih/tests/unit/controllers/admin/admission-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:admin/admission', 'Unit | Controller | admin/admission', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('studyinbih/tests/unit/controllers/admin/blog-add-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:admin/blog-add', 'Unit | Controller | admin/blog add', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('studyinbih/tests/unit/controllers/admin/blog-edit-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:admin/blog-edit', 'Unit | Controller | admin/blog edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('studyinbih/tests/unit/controllers/admin/blog-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:admin/blog', 'Unit | Controller | admin/blog', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('studyinbih/tests/unit/controllers/admin/city-add-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:admin/city-add', 'Unit | Controller | admin/city add', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('studyinbih/tests/unit/controllers/admin/city-edit-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:admin/city-edit', 'Unit | Controller | admin/city edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('studyinbih/tests/unit/controllers/admin/fields-add-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:admin/fields-add', 'Unit | Controller | admin/fields add', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('studyinbih/tests/unit/controllers/admin/fields-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:admin/fields', 'Unit | Controller | admin/fields', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('studyinbih/tests/unit/controllers/admin/logout-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:admin/logout', 'Unit | Controller | admin/logout', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('studyinbih/tests/unit/controllers/admin/program-add-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:admin/program-add', 'Unit | Controller | admin/program add', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('studyinbih/tests/unit/controllers/admin/program-edit-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:admin/program-edit', 'Unit | Controller | admin/program edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('studyinbih/tests/unit/controllers/admin/university-add-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:admin/university-add', 'Unit | Controller | admin/university add', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('studyinbih/tests/unit/controllers/admin/university-edit-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:admin/university-edit', 'Unit | Controller | admin/university edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('studyinbih/tests/unit/controllers/locations-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:locations', 'Unit | Controller | locations', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('studyinbih/tests/unit/controllers/login-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:admin/login', 'Unit | Controller | admin/login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('studyinbih/tests/unit/controllers/study-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:study', 'Unit | Controller | study', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('studyinbih/tests/unit/controllers/university-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:university', 'Unit | Controller | university', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('studyinbih/tests/unit/routes/admin-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin', 'Unit | Route | admin', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/admin/admission-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/admission', 'Unit | Route | admin/admission', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/admin/blog-add-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/blog-add', 'Unit | Route | admin/blog add', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/admin/blog-edit-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/blog-edit', 'Unit | Route | admin/blog edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/admin/blog-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/blog', 'Unit | Route | admin/blog', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/admin/cities-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/cities', 'Unit | Route | admin/cities', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/admin/city-add-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/city-add', 'Unit | Route | admin/city add', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/admin/city-edit-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/city-edit', 'Unit | Route | admin/city edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/admin/fields-add-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/fields-add', 'Unit | Route | admin/fields add', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/admin/fields-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/fields', 'Unit | Route | admin/fields', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/admin/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/index', 'Unit | Route | admin/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/admin/logout-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/logout', 'Unit | Route | admin/logout', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/admin/program-add-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/program-add', 'Unit | Route | admin/program add', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/admin/program-edit-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/program-edit', 'Unit | Route | admin/program edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/admin/programs-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/programs', 'Unit | Route | admin/programs', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/admin/universities-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/universities', 'Unit | Route | admin/universities', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/admin/university-add-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/university-add', 'Unit | Route | admin/university add', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/admin/university-edit-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/university-edit', 'Unit | Route | admin/university edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/admission-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admission', 'Unit | Route | admission', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/blog-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:blog', 'Unit | Route | blog', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/city-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:city', 'Unit | Route | city', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/locations-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:locations', 'Unit | Route | locations', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/login-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/program-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:program', 'Unit | Route | program', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/search-results-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:search-results', 'Unit | Route | search results', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/study-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:study', 'Unit | Route | study', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/universities-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:universities', 'Unit | Route | universities', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/routes/university-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:university', 'Unit | Route | university', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('studyinbih/tests/unit/services/ajax-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:ajax', 'Unit | Service | ajax', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","require('studyinbih/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjlpfile":"tests.js"}